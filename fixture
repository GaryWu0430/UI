#!/usr/bin/python
# -*- coding: UTF-8 -*-
import sys
if sys.version_info[0] < 3:
    from Tkinter import *  # # Python 2.x
else:
    from tkinter import *  # # Python 3.x
import socket

class FixtureDialog:

    def __init__(self,fixture_num):
        self.root = Tk()
        self.Result = False
        self.fixture_num=fixture_num
        self.labelFixtureSN=[]
        self.txtSN=[]
        self.entrySN=[]
        self.fixture_sn=[]
        self.focus_flag=0 #记录光标位置，根据光标位置确定刷枪回车键的作用，是把光标定到下一个输入框还是按下OK键
        self.setWindow()
        self.resizeWindow()
        self.createWidgets()

    def setWindow(self):
        #self.fontSize = int(round(self.w / 40)) + 2
        self.fontSize=20
        self.root.title("Scan Fixture ID")
        #为root窗口绑定回车事件，每按下回车键，光标就跳到下一个输入框，
        #因为OP的刷枪自带回车，需要刷完条码后自动跳到下一个输入框
        self.root.bind('<Return>',self.press_tab)

    def press_tab(self,event):
        self.focus_flag+=1
        if(self.focus_flag>=self.fixture_num):
        	self.onBnClickedOK()
        else:
       		self.entrySN[self.focus_flag].focus_set()

    def resizeWindow(self):
        # 设置窗口大小注意：是x 不是*
        #self.root.geometry('%dx%d+%d+%d' % (self.w, self.h, 10, 10))

        # 设置窗口是否可以变化长/宽，False不可变，True可变，默认为True
        self.root.resizable(width=True, height=True)

    def createWidgets(self):
        # 创建Label
        for i in range(0,self.fixture_num):
            self.labelFixtureSN.append(Label(self.root,text=u'Password:' ,font=("Arail", self.fontSize)))
            self.labelFixtureSN[i].grid(row=i,column=0)
        # 绑定创建StringVar() txtOPID
            self.txtSN.append(StringVar())  # 创建Entry OPID

        # 创建EntrySN
            self.entrySN.append(Entry(
                self.root,
                width=25,
                font=("Arail", self.fontSize),
                textvariable=self.txtSN[i]))
        #self.editOPID.place(anchor="w", relx=0.25, rely=0.30)
            self.entrySN[i].grid(row=i,column=1)
      
        self.entrySN[self.focus_flag].focus_set()
        # 创建Button OK
        self.btnOK = Button(
            self.root,
            text="OK",
            font=("Arail", self.fontSize),
            height=1,
            width=8,
            command=self.onBnClickedOK)
        #self.btnOK.place(anchor="center", relx=0.3, rely=0.60)
        self.btnOK.grid(row=self.fixture_num,column=0)
        #self.btnOK.bind('<Key-Return>', self.onKeyReturn)

        # 创建Button Cancel
        self.btnCancel = Button(
            self.root,
            text="Cancel",
            font=("Arail", self.fontSize),
            height=1,
            width=8,
            command=self.onBnClickedCancel)
        self.btnCancel.grid(row=self.fixture_num,column=1)

    def onBnClickedOK(self):
        for i in range(0,self.fixture_num):
            content = self.txtSN[i].get()
            self.fixture_sn.append(content)
        self.Result=True
        self.close_window()
      
    def onBnClickedCancel(self):
        self.close_window()

    def close_window(self):
        self.root.destroy()
  
    def showDialog(self):
        self.root.mainloop()
        return self.Result

    def mainloop(self):
        self.root.mainloop()
        return self.Result


def main():
    app = FixtureDialog(3)  # 创建窗口对象的背景色
    # app.showDialog()                 # 进入消息循环
    if app.showDialog():
        print ('True')
    else:
        print ('False')


if __name__ == '__main__':
    main()
