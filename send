#!/usr/bin/evn python
#coding:utf-8
import json
import os
import SocketServer
import time
import logging
from datetime import datetime
from ConnectDB import ConnectDB
from Logger import Logger
from Screw_MDC import Serial_Set
import threading
import serial
import socket
from FormGlue import GlueDialog
from FormFixture import FixtureDialog

filepath = os.path.dirname( os.path.realpath(__file__) )
_FORM_ = None
_Model_ = ""
_Station_ = ""
_OPID_ = ""
_SERIAL_ = ""
_SN_Length_ = 28
AOI_Log_Path = ""
return_msg = ""
log_data0=""
_SERIAL_0=""
result0=""
log_data2=""
glue_sn=[]
Gluelist=''
fixture_sn=[]
Fixturelist=""

Logger = Logger()
class echorequestserver( SocketServer.BaseRequestHandler ):

    def handle( self ):
        conn = self.request
        #print "Connection: %s" % self.client_address
        logging.debug( "Connection on port %s" % self.client_address[1] ) 
        client_data = ""       

        while True:
            client_data = conn.recv( 2048 )
            client_data = client_data.decode('utf-8').strip()
            #print client_data
            if client_data.find("Station")>=0:
            # if client_data[-1:] == "\n" :
                print ("I got the delimiter")
                logging.debug( client_data )
                nowtime = str( datetime.now() )
                logging.debug( "%s - Get Signal from PLC: %s" % ( nowtime, client_data ) )
                logging.debug( "------------Request Start---------------" )
                return_msg = self.Execute_request( client_data )
                nowtime = str( datetime.now() )
                logging.debug( "%s - Respond data: %s" % ( nowtime, return_msg ) )
                logging.debug( "------------Request Finished------------" )
                conn.sendall( return_msg )
                return_msg = ""
                client_data = ""


    def Execute_request( self, client_data ) :
        print('----------------',client_data)
        logging.debug( "Data: %s \nOn port %s " % ( client_data, self.client_address[1] ) )
        if client_data[-2:] == "\r\n" or client_data[-2:] == "\n\r" :
            client_data = client_data[:-2]
        elif client_data[-1:] == "\n" or client_data[-1:] == "\r" :
            client_data = client_data[:-1]
        else :
            client_data = client_data
        
        #_FORM_.AddItemList( "Currently receiving data:", client_data, "", "", "", "" )

        if "RESULT" in client_data.upper() and "STATION=1" in client_data.upper():
            #print   '9999999999999999'
            # handshake = ConnectDB()
            print ("2222222222222222222222")
            if client_data.split('##Result=')[1].split('##')[0].upper()== "PASS":
                result = "PASS"
                return_msg = "PASS"
            else :
                result = "FAIL"
                return_msg = "FAIL"
            log_data = client_data.upper()
            _SERIAL_ = client_data[3:].split('##')[0].upper()
            print ('_SERIAL_ ',_SERIAL_)
            
            inputstring = "Result=%s##%s##ProgramVersion=%s##PCName=%s##QMSGlueRed=%s##QMSGlueWhite=%s##" % ( result, log_data, '1.0.0.1' ,  "PCName" ,glue_sn[0],glue_sn[1] ) 
            Logger.Write( 'UpdateToSF:' )
            Logger.Write( 'inputstring=%s' % inputstring )
            if result.upper() =="PASS":
                handshake = ConnectDB()
                ( iResult, iMessage ) = handshake.UpdateToFADB( _SERIAL_, _Station_, result, inputstring )
                # ( iResult, iMessage) =('PASS','SF DISABLE')
                Logger.Write('QMS Response:')
                Logger.Write('iResult=%s' % iResult)
                Logger.Write('iMessage=%s' % iMessage)
                if iResult.upper() == "PASS" :
                    return_msg = "PASS"
                else :
                    return_msg = "FAIL"
            else:
                result="FAIL"
                return_msg="FAIL"

            if result != "PASS" :
                result = "FAIL"
            Logger.MoveLogByResult( result )
            self.InitialVariable()
            #_FORM_.StopMainThread( "PASS", "Message", "" )

        # elif "RESULT" in client_data.upper() and "STATION=0" in client_data.upper():
        #     log_data0 = client_data.upper()
        #     log_data2 = log_data0[58:-1]
            # print(return_msg)
        elif "SN" in client_data.upper() and "STATION=0" in client_data.upper():
            _SERIAL_ = client_data[3:].split('##')[0].upper()
            print ("_SERIAL_: ", _SERIAL_)     
            Gluelist = "QMSGlueRed=%s##QMSGlueWhite=%s##" % (glue_sn[0],glue_sn[1])    
            print("GlueSN:%s" % Gluelist) 
            Fixturelist = "FixtureID=%s##" % fixture_sn[0]
            print("FixtureSN:%s" % Fixturelist)
            inputstring1 = Fixturelist+Gluelist
            print(inputstring1)
            # Do check routing
            routing_check = ConnectDB()
            (GResult, GMessage, GParamAll) = routing_check.CheckGlueID(_SERIAL_,_Model_, _Station_, inputstring1)
            if "PASS" in GResult.upper() :                  
                ( iResult, iMessage, iParamAll ) = routing_check.CheckRoutingFA( _SERIAL_ , _Station_, None, None )                
                Logger.SetLogFileName( _SERIAL_, _Model_, _Station_ )
                Logger.Write( 'SerialNumber: %s' % _SERIAL_ )
                Logger.Write( 'Model: %s ' % _Model_ )
                Logger.Write( 'Station: %s' % _Station_ )
                Logger.Write( 'iResult: %s' % iResult )
                Logger.Write( 'iMessage: %s' % iMessage )
                Logger.Write( 'iParamAll: %s' % iParamAll )
                Logger.Write('Gluelist: %s' % Gluelist)
                Logger.Write(GMessage)
                #_FORM_.ResetSNEntry( _SERIAL_ )
                if "PASS" in iResult.upper() :                  
                    # Return Check routing pass
                    return_msg = 'RUCP'
                else :
                    # Return Check routing Fail
                    return_msg = "RUCF"
            else :
                # Return Check routing Fail
                print("GlueSN Check Fail")
                return_msg = "RUCF"
                # print('return_msg',return_msg)
        # elif "SN" in client_data.upper() and "STATION=0" in client_data.upper():
            # return_msg="NG"

        # just a try
        elif "END" in client_data.upper() :
            self.InitialVariable()
            #_FORM_.StopMainThread( "PASS", "Message", "" )
            return_msg = "Hello World!!!"

        else :
            return_msg = "Incorrect signal!!!"
        
            
        return return_msg.encode( "utf-8" )


    def InitialVariable( self ) :
        _SERIAL_ = ""
        _RUNNUNG_FLAG_ = False

class QSMC_TCP_Server(threading.Thread):
    def __init__(self, form = None ):
        threading.Thread.__init__( self )
        self.result = None
        self.message = None
        #global _FORM_
        #_FORM_ = form
        ( self.address, self.port ) = ( "192.168.1.1", 1234 )
        # ( self.address, self.port ) = ( "172.20.155.25", 1234 )
        # ( self.address, self.port ) = ( "169.254.107.246", 8090 )

    def run(self) :
        self.ServerUp()

    def ServerUp(self):
        LogFileDirectory = "%s%sLogFolder%s" % ( filepath, os.sep, os.sep )
        if not os.path.exists( LogFileDirectory ) :
            os.makedirs( LogFileDirectory )

        logFile = "%sServerLog_%s.log" % ( LogFileDirectory, time.strftime( "%Y_%m_%d_%H_%M_%S", time.localtime() ) )
        logging.basicConfig( filename = logFile, level = logging.DEBUG )
        logging.getLogger( "QSMC TCP Server" ).setLevel( logging.DEBUG )

        logging.info( "listening to http://%s:%d" % ( self.address, self.port ) )
        
        server = SocketServer.ThreadingTCPServer( ( self.address, self.port ), echorequestserver )
        print ("TCP Server up on %s, %d" % ( self.address, self.port ))
        global _Model_
        global _Station_
        global _OPID_
        global _SERIAL_
        global _RUNNUNG_FLAG_
        global glue_sn
        global Gluelist
        global fixture_sn
        global Fixturelist
        _Model_ = "V73A"
        _Station_ = "TIMCheck2"
        #_OPID_ = _FORM_.GetDataFromForm( "OPID" )
        _RUNNUNG_FLAG_ = False
        server.serve_forever()
if __name__=='__main__':
    FormFixtureDlg = FixtureDialog(1)
    if FormFixtureDlg.mainloop():
        fixture_sn = FormFixtureDlg.fixture_sn
    for i in range(1): 
        if fixture_sn[i] == '':
            sys.exit('Need to input Fixture ID')
    FormGlueDlg = GlueDialog(2)
    if FormGlueDlg.mainloop():
        glue_sn = FormGlueDlg.glue_sn
    for i in range(2): 
        if glue_sn[i] == '':
            sys.exit('Need to input Glue ID')
    my_input = QSMC_TCP_Server()
    #time.sleep(3)
    while True:
        my_input.run()
