#!/usr/bin/env python
# -*- coding:utf-8 -*-
from Tkinter import *
#from tkSimpleDialog import *
#from itertools import count
import ttk
import socket
import os
import time
import platform
import json
from func.ConnectDB import ConnectDB
# from ui.OPID import OPIDDialog
from ui.FormFixture import FixtureDialog
import threading
from func.Logger import Logger

# ********************************************************************
# **              Release Note
# **                                        Andy
# ** 1.  Config.json add ProgramType for automation or manual
# ** 2. Modify MainForm : Must input OPID and choice  ProgramType
# ********************************************************************

_PROGRAM_VERSION_ = '1.0.0.1'
_XML_VERSION_ = '1.0'



class MainForm():
    def __init__(self):
        self.pass_count = 0
        self.fail_count = 0
        self.flag_processing = False
        self.is_runing = False
        self.routing_check = False
    
        self.fixture_sn=None
        self.InitConfig()
        #如果治具数量是0，就不再显示治具输入窗口,否则就显示治具输入窗口
        if self.fixture_num!=0:
            FormFixtureDlg = FixtureDialog(int(self.fixture_num))
            if FormFixtureDlg.mainloop():
                self.fixture_sn = FormFixtureDlg.fixture_sn
                self.gluesn1 = self.fixture_sn[0]
                self.gluesn2 = self.fixture_sn[1]                
        self.setWindow()
        self.stringVar_computer_name = StringVar()
        self.stringVar_model = StringVar()
        self.stringVar_operator_ID = StringVar()
        self.stringVar_program_version = StringVar()
        self.stringVar_sn = StringVar()
        self.stringVar_station = StringVar()
        self.stringVar_xml_version = StringVar()

        self.SetComponents()
        self.LocateComponents()
        self.bindEvents()
        
    def InitConfig(self):
        config_path = 'Config.json'
        with open(config_path, 'r') as f:
            data = json.load(f)
        #print data
        self.model_name = data['modelname']
        self.station_name = []
        self.module_name = data['modulename']
        self.class_name = data['classname']
        self.fixture_num=int(data['fixturenum'])
        self.ProgramType = data["ProgramType"]
        for stop in data['stationname'].split(','):
            self.station_name.append(stop)
        
    def setWindow(self):
        self.root = Tk()
        self.master = Frame(self.root)  # , bg='GREEN'
        self.root.title('PU11' + ' V' + _PROGRAM_VERSION_)
        self.w, self.h = self.root.winfo_screenwidth(), self.root.winfo_screenheight()  # Set maximum size 
        screenwidth = self.root.winfo_screenwidth()
        screenheight = self.root.winfo_screenheight()
        self.x = (screenwidth - self.w) * 0.5
        self.y = (screenheight - self.h) * 0.5
        
        self.root.geometry('%dx%d+%d+%d' % (self.w, self.h, self.x, self.y))
        self.background = self.root.cget('bg')
        
    def SetComponents(self):   
        
        normalsize = int(round(self.w / 100)) 
        smallsize = int(round(normalsize * 0.75)) 
        #print smallsize
        largesize = normalsize * 2
        titlesize = int(round(largesize * 1.5))
        statussize = largesize * 2
        buttonsize = int(round(largesize * 0.75))
        
        font_family_name = 'FreeMono'
        
        fontsmall = (font_family_name, smallsize)  # the font width should be same size,幼圆,宋体,新宋体,Lucida Sans Typewriter,GungsuhChe,宋体,Consolas,Monospace,Arail,FreeMono
        fontnormal = (font_family_name, normalsize)
        fontlarge = (font_family_name, largesize)
        fonttitle = (font_family_name, titlesize)
        fontstatus = (font_family_name, statussize)
        fontbutton = (font_family_name, buttonsize)
        
        frame_left_width = int(round(self.w * 0.2 / 100)) * 100
        frame_right_top_height = int(round(self.h * 0.2 / 100)) * 100
        frame_right_middle_height = frame_right_top_height / 2
               
        self.master.pack(expand=YES, fill=BOTH)
        
        self.frame_left = Frame(self.master, width=frame_left_width, relief='groove', borderwidth=2)  # , borderwidth=5
        self.frame_left.pack(side=LEFT, padx=5, pady=10, fill=Y)
        
        self.frame_right = Frame(self.master, relief='groove', borderwidth=2)  # , bg='GREEN'
        self.frame_right.pack(expand=YES, side=RIGHT, padx=5, pady=10, fill=BOTH)
        
        self.frame_right_top = Frame(self.frame_right, height=frame_right_top_height, relief='groove', borderwidth=2)
        self.frame_right_top.pack(side=TOP, padx=0, pady=0, fill=X)
        
        self.frame_right_middle = Frame(self.frame_right, height=frame_right_middle_height)  # , bg='GREEN'
        self.frame_right_middle.pack(side=TOP, padx=0, pady=10, fill=X)
        
        self.frame_right_bottom = Frame(self.frame_right, relief='groove', borderwidth=2)
        self.frame_right_bottom.pack(expand=YES, side=TOP, padx=0, pady=0, fill=BOTH)
        
        self.frame_right_message = Frame(self.frame_right_bottom)
        
        self.stringVar_model.set(self.model_name)
        self.label_model_name = Label(self.frame_left, text='Model: ', font=fontnormal)
        self.entry_model = Entry(self.frame_left, width=15, font=fontnormal, state=DISABLED, textvariable=self.stringVar_model)
        
        self.stringVar_station.set(self.station_name)
        self.label_station_name = Label(self.frame_left, text='Station: ', font=fontnormal)
        self.entry_station = ttk.Combobox(self.frame_left, width=15, font=fontnormal, state='readonly', value=self.station_name)

        self.stringVar_program_version.set('')
        self.label_program_version = Label(self.frame_left, text='Version:', font=fontnormal)
        self.entry_program_version = Entry(self.frame_left, width=15, font=fontnormal, state=DISABLED, textvariable=self.stringVar_program_version)
        
        self.stringVar_xml_version.set('')
        self.label_xml_version = Label(self.frame_left, text='Xml Ver.:', font=fontnormal)
        self.entry_xml_version = Entry(self.frame_left, width=15, font=fontnormal, state=DISABLED, textvariable=self.stringVar_xml_version)
        
        self.stringVar_computer_name.set(socket.gethostname())
        self.label_computer_name = Label(self.frame_left, text='PC Name:', font=fontnormal)
        self.entry_computer_name = Entry(self.frame_left, width=15, font=fontnormal, state=DISABLED, textvariable=self.stringVar_computer_name)

        self.label_total = Label(self.frame_left, text='Total', width=5, font=fontnormal)
        self.label_total_item = Label(self.frame_left, text='0', width=3, font=fontnormal)
        
        self.label_pass = Label(self.frame_left, text='PASS', width=5, font=fontnormal)
        self.label_pass_item = Label(self.frame_left, text='0', width=3, font=fontnormal, fg='GREEN')
        
        self.label_fail = Label(self.frame_left, text='FAIL', width=5, font=fontnormal)
        self.label_fail_item = Label(self.frame_left, text='0', width=3, font=fontnormal, fg='RED')
        
        self.label_test_time = Label(self.frame_left, text='Test Time', font=fontnormal)
        self.label_timer = Label(self.frame_left, text='00:00:00.00', font=fontlarge)
        
        self.label_title = Label(self.frame_right_top, text=self.model_name + ' ' + str(self.station_name) , font=fonttitle)
        
        self.label_sn = Label(self.frame_right_middle, text='SN:', font=fontbutton)
        # modified by Andy 2018904
        self.stringVar_sn.set( "ZZ99999" )
        self.entry_sn = Entry(self.frame_right_middle, width=30, font=fontlarge, textvariable=self.stringVar_sn )
        self.entry_sn.select_range( 0, END )

        self.button_start = Button(self.frame_right_middle, text='Start', width=10, font=fontbutton)  # height=5, 
        self.button_finish = Button(self.frame_right_middle, text='Finish', width=10, state=DISABLED , font=fontbutton)  # height=5,
        
        self.label_status = Label(self.frame_right_bottom, text='Status:', width=7, font=fontnormal)
        self.label_status_result = Label(self.frame_right_bottom, text='Ready', width=20, height=2, font=fontstatus , bg='#9696FF')

        display_info = '%-30s%-20s%-20s%-20s%-20s%-20s' % ('Item', 'Result', 'HSpec', 'LSpec', 'Status', 'Description')
        self.label_display = Label(self.frame_right_bottom, text=display_info, font=fontsmall, anchor='w', justify='left')
        self.listbox_display = Listbox(self.frame_right_bottom, font=fontsmall, height=15)
        
        self.label_shopfloor = Label(self.frame_right_message, text='SF Msg:', width=7, font=fontnormal)
        self.label_shopfloor_result = Label(self.frame_right_message, font=fontnormal)  # Remove width setting,do not limit width now


    def LocateComponents(self):
        fl_k_relx = 0.05
        fl_v_relx = 0.4
        self.label_model_name.place(anchor='w', relx=fl_k_relx, rely=0.05)
        self.entry_model.place(anchor='w', relx=fl_v_relx, rely=0.05)
        
        self.label_station_name.place(anchor='w', relx=fl_k_relx, rely=0.1)
        self.entry_station.place(anchor='w', relx=fl_v_relx, rely=0.1)
        
        self.label_program_version.place(anchor='w', relx=fl_k_relx, rely=0.15)
        self.entry_program_version.place(anchor='w', relx=fl_v_relx, rely=0.15)
        
        self.label_xml_version.place(anchor='w', relx=fl_k_relx, rely=0.2)
        self.entry_xml_version.place(anchor='w', relx=fl_v_relx, rely=0.2)
        
        
        # self.label_operator_ID.place(anchor='w', relx=fl_k_relx , rely=0.30)
        # self.entry_operator_ID.place(anchor='w', relx=fl_v_relx, rely=0.30)
        
        self.label_computer_name.place(anchor='w', relx=fl_k_relx , rely=0.35)
        self.entry_computer_name.place(anchor='w', relx=fl_v_relx, rely=0.35)

        self.label_total.place(anchor='w', relx=fl_k_relx, rely=0.5)
        self.label_total_item.place(anchor='w', relx=fl_v_relx, rely=0.5)
        
        self.label_pass.place(anchor='w', relx=fl_k_relx, rely=0.55)
        self.label_pass_item.place(anchor='w', relx=fl_v_relx, rely=0.55)
                
        self.label_fail.place(anchor='w', relx=fl_k_relx, rely=0.6)
        self.label_fail_item.place(anchor='w', relx=fl_v_relx, rely=0.6)
        
        self.label_test_time.place(anchor='w', relx=fl_k_relx, rely=0.7)
        self.label_timer.place(anchor='w', relx=fl_k_relx, rely=0.75)
        
        self.label_title.pack(expand=YES, side=TOP, padx=10, pady=0, fill=BOTH)
        
        frm_rely = 0.35
        
        self.label_sn.place(anchor='w', relx=0.02, rely=frm_rely)
        self.entry_sn.place(anchor='w', relx=0.12, rely=frm_rely)

       
        self.button_finish.place(anchor='w', relx=0.85, rely=frm_rely)
        self.button_start.place(anchor='w', relx=0.7, rely=frm_rely)

        self.label_status_result.pack(side=TOP, padx=10, pady=10, fill=X)        
        
        self.label_display.pack(side=TOP, padx=10, pady=0, fill=X)
        self.listbox_display.pack(side=TOP, padx=10, pady=0, fill=BOTH)
        
        self.frame_right_message.pack(side=TOP, padx=10, pady=10, fill=X)
        self.label_shopfloor.pack(side=LEFT, padx=10, pady=0)
        self.label_shopfloor_result.pack(side=LEFT, padx=10, pady=0)
                
    def bindEvents(self):
        self.stringVar_sn.trace('w', self.AutoUpperCase)
        self.button_start.config(command=self.OnBnClickedStart)
        self.button_finish.config(command=self.OnBnClickedFinish)
        self.entry_sn.bind('<Key-Return>', self.ReturnKeyDown)
        self.entry_sn.focus_set()
        
    def mainloop(self) :
        self.root.mainloop()
        
    def StartTimeCounter(self):
        elapse = float(time.time() - self.start_time)        
        strtime = '%02d:%02d:%02d.%02d' % (elapse / 3600, elapse % 3600 / 60, elapse % 60 / 1, int(elapse % 1 * 100 / 1))
        self.label_timer.config(text=str(strtime))
        
        if self.flag_processing:
            self.label_timer.after(100, self.StartTimeCounter)  # 1000ms

    def AddItemList(self, item, result, high_spec, low_spec, status, description):
        line = '%-30s%-20s%-20s%-20s%-20s%-20s\n' % (item, result, high_spec, low_spec, status, description)
        self.listbox_display.insert(0, line)  # 1.0 is the position before the first character of the first line. 
        
    def InitTestingItem(self):
        self.label_timer.configure(text='00:00:00.00')
        #self.errorcode_list = []
        self.listbox_display.delete(0, END)
        self.label_shopfloor_result.configure(text='', bg=self.background)
        self.label_status_result.configure(text='', bg=self.background)
              
    def OnBnClickedStart(self):
        self.StartMainThread()

    def OnBnClickedFinish(self):
        self.StopMainThread('FAIL', 'Button Stop Clicked!')

    def EnableWindow(self, State):
        if State:
            self.entry_sn.config(state=NORMAL)
            self.button_start.config(state=NORMAL)
            self.button_finish.config(state=DISABLED)
            self.entry_sn.selection_range( 0, END )
            self.entry_sn.focus_set()
        else:
            self.entry_sn.config(state=DISABLED)
            self.button_start.config(state=DISABLED)
            self.button_finish.config(state=NORMAL)
            self.label_sn.focus_set()
            
    def SetStatus(self, status):
        if status.upper() == 'RUNNING...':
            self.label_status_result.configure(text='Running...', bg='YELLOW')
        elif status.upper() == 'READY':
            self.label_status_result.configure(text='Ready', bg='#9696FF')
        elif status.upper() == 'PASS':
            self.label_status_result.configure(text='PASS', bg='GREEN')
        elif status.upper() == 'FAIL':
            self.label_status_result.configure(text='FAIL', bg='RED')
        else:
            self.label_status_result.configure(text=status, bg='RED')
            
    
    def StartMainThread(self):
        self.EnableWindow(False)        
        if self.flag_processing:
            return
        self.flag_processing = True
        
        if self.is_runing:
            return
        self.is_runing = True
        
        self.start_time = time.time()
        self.InitTestingItem()
        if self.fixture_num!=0:
            if(self.gluesn1=="" or self.gluesn2==""):
                self.StopMainThread('FAIL', 'please input glueSN！！！')
            elif(self.gluesn1 == self.gluesn2):
                self.StopMainThread('FAIL', u'gluesn1 与 gluesn2相等！！！')
        self.StartTimeCounter()
        self.SetStatus('Running...')
        self.sn = self.entry_sn.get()
        self.sn = self.sn.strip()        
        self.entry_sn.delete(0, END)
        self.entry_sn.insert(END, self.sn)

        if self.ProgramType != "Auto" :
            routing_check = ConnectDB()
            self.station_name=self.entry_station.get()
            (iResult, iMessage, iParamAll) = routing_check.CheckRoutingFA(self.sn , self.station_name, "", self.fixture_sn)
            print 'iResult: %s' % iResult
            print 'iMessage: %s' % iMessage
            print 'iParamAll: %s' % iParamAll
            if iResult.upper() == 'PASS' and self.sn != 'ZZ99999':
                print "ready to routing"
                self.routing_check = True

            message = u'iResult=%s,iMessage=%s,iParamAll=%s' % (iResult, iMessage, iParamAll)        
            Logger.SetLogFileName(self.sn, self.model_name, self.station_name)
            Logger.Write('Program Version: %s' % _PROGRAM_VERSION_)
            Logger.Write('XML Version: %s' % _XML_VERSION_)
            Logger.Write('SerialNumber: %s' % self.sn)
            Logger.Write('Model: %s ' % self.model_name)
            Logger.Write('Station: %s' % self.station_name) 
            #print message
            Logger.Write(message)

        else :
            iResult = "PASS"
            iMessage = "Automatic Line Program"

        self.stringVar_model.set(self.model_name)
        self.label_title.config(text = self.model_name + ' ' + str(self.station_name))
        
        if iResult.upper() == 'PASS' :
            self.ShowMessage(iMessage, 'PASS')
            obj = __import__(self.module_name, fromlist=True) 
            func = self.class_name
            print('class_name:%s' % func)
            if self.ProgramType == "Auto" : 
                if self.pass_count != 0 or self.fail_count != 0 :
                    print "TCP server is up"
                    
                elif hasattr(obj, func):
                    func = getattr(obj, func)
                    self.work_thread = func(self)
                    self.work_thread.daemon = True
                    self.work_thread.start()
                else:
                    print "FAIL"

            else :
                if hasattr(obj, func):
                    func = getattr(obj, func)
                    self.work_thread = func(self)
                    self.work_thread.daemon = True
                    self.work_thread.start()
                else:
                    print "FAIL"
        else :
            # self.label_shopfloor_result.configure(text=iMessage, fg='RED')
            self.entry_sn.selection_range(0, END)
            self.StopMainThread('FAIL', iMessage)
            return
        return
    
    def StopMainThread(self, result='FAIL', message='Message', inputstring=''):
        result = result.strip().upper()
        self.ShowMessage(message, result)
        self.SetStatus(result)
        if result.upper() == 'PASS':
            self.pass_count = self.pass_count + 1
        else:
            self.fail_count = self.fail_count + 1
        
        # Change configure to config
        self.label_pass_item.config(text=str(self.pass_count))
        self.label_fail_item.config(text=str(self.fail_count))
        self.label_total_item.config(text=str(self.pass_count + self.fail_count))
        
        self.entry_sn.delete('0', END)
        self.entry_sn.focus_set()

        if self.ProgramType != "Auto" :
            handshake = ConnectDB()
            if(inputstring != ''):
                inputstring = 'Result=%s##%s' % (result, inputstring)
        
            Logger.Write('UpdateToSF:')
            Logger.Write('SN=%s' % self.sn)
            Logger.Write('Station=%s' % self.station_name)
            Logger.Write('inputstring=%s' % inputstring)
            if(inputstring != ''):
                (iResult, iMessage) = handshake.UpdateToFADB(self.sn , self.station_name , result , inputstring)
                Logger.Write('QMS Response:')
                Logger.Write('iResult=%s' % iResult)
                Logger.Write('iMessage=%s' % iMessage)
                print 'iMessage: %s' % iMessage
            Logger.MoveLogByResult(result)

            self.EnableWindow(True)
            self.flag_processing = False
            self.is_runing = False

        else :
            self.flag_processing = False
            self.is_runing = False
            time.sleep( 2 )
            self.ResetSNEntry( "ZZ99999" )
            self.StartMainThread()
        #win32api.keybd_event(13,0,0,0)
        #停止子线程

        
    def ReturnKeyDown(self, event):
        self.StartMainThread()

    def ShowMessage(self, message=None, result='FAIL'):
        if result.upper() == 'PASS':
            self.label_shopfloor_result.configure(text=message, fg='GREEN')
        else:
            self.label_shopfloor_result.configure(text=message, fg='RED')

    def AutoUpperCase(self, *arg):
        self.stringVar_sn.set(self.stringVar_sn.get().upper())


    def ResetSNEntry( self, serial_number ) :
        print "change text"
        self.entry_sn.config(state=NORMAL)
        self.stringVar_sn.set( serial_number )
        self.entry_sn.config( textvariable=self.stringVar_sn  )
        self.entry_sn.config(state=DISABLED)


    def GetDataFromForm( self, key ) :
        if key == "Model" :
            return self.model_name
        elif key == "Station" :
            return self.station_name
        elif key == "ProgramVersion" :
            return _PROGRAM_VERSION_
        elif key == "PCName" :
            return socket.gethostname()
        elif key == SN :
            return self.sn
        else :
            return "No Data"


def main():
    app = MainForm()
    app.mainloop()
 
if __name__ == '__main__':
    main()


    
